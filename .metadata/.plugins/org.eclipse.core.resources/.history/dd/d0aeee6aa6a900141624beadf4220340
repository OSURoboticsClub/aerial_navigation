#include "opencv2/video/tracking.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/gpu/gpu.hpp"

#include <iostream>
#include <ctype.h>
#include <stdio.h>
#include <vector>
#include <sys/time.h>

using namespace cv;
using namespace std;


int H_MIN = 0;
int H_MAX = 180;
int S_MIN = 0;
int S_MAX = 255;
int V_MIN = 0;
int V_MAX = 255;
const string trackbarWindowName = "Trackbars";

long getTimeDelta(struct timeval timea, struct timeval timeb) {
	return 1000000 * (timeb.tv_sec - timea.tv_sec) +
			(int(timeb.tv_usec) - int(timea.tv_usec));
}
void on_trackbar( int, void* )
{
	//This function gets called whenever a
	// trackbar position is changed
}
void createTrackbars(){
	//create window for trackbars


    namedWindow(trackbarWindowName,0);
	//create memory to store trackbar name on window
	char TrackbarName[50];
	sprintf( TrackbarName, "H_MIN", H_MIN);
	sprintf( TrackbarName, "H_MAX", H_MAX);
	sprintf( TrackbarName, "S_MIN", S_MIN);
	sprintf( TrackbarName, "S_MAX", S_MAX);
	sprintf( TrackbarName, "V_MIN", V_MIN);
	sprintf( TrackbarName, "V_MAX", V_MAX);
	//create trackbars and insert them into window
	//3 parameters are: the address of the variable that is changing when the trackbar is moved(eg.H_LOW),
	//the max value the trackbar can move (eg. H_HIGH),
	//and the function that is called whenever the trackbar is moved(eg. on_trackbar)
	//                                  ---->    ---->     ---->
    createTrackbar( "H_MIN", trackbarWindowName, &H_MIN, H_MAX, on_trackbar );
    createTrackbar( "H_MAX", trackbarWindowName, &H_MAX, H_MAX, on_trackbar );
    createTrackbar( "S_MIN", trackbarWindowName, &S_MIN, S_MAX, on_trackbar );
    createTrackbar( "S_MAX", trackbarWindowName, &S_MAX, S_MAX, on_trackbar );
    createTrackbar( "V_MIN", trackbarWindowName, &V_MIN, V_MAX, on_trackbar );
    createTrackbar( "V_MAX", trackbarWindowName, &V_MAX, V_MAX, on_trackbar );


}
int main( int argc, const char** argv )
{
	struct timeval timea, timeb, timeS, timeE;
	long totalTime = 0, camTime = 0, kalTime = 0;
	int nFrames = 0;

	createTrackbars();

	VideoCapture cap;
	cap.open(0);

	if( !cap.isOpened() )
	{
		cout << "***Could not initialize capturing...***\n";
		return -1;
	}

	Mat frame, thresh;
	gpu::GpuMat gpuframe, threshold, countours;
	vector<gpu::GpuMat> hsvplanes(3);

	bool paused = false;

	cout << "optimized code: " << useOptimized() << endl;
	cout << "cuda devices: 	 "<< gpu::getCudaEnabledDeviceCount() << endl;
	cout << "current device: " << gpu::getDevice() << endl;
	for(;;)
	{
		gettimeofday(&timea, NULL);
		if( !paused )
		{
			cap >> frame;
			nFrames++;
			if( frame.empty() )
				break;
			gpuframe.upload(frame);
		}



		if( !paused )
		{
			gpu::cvtColor(gpuframe, gpuframe, COLOR_BGR2HSV);
			gpu::split(gpuframe, hsvplanes);
			gpu::threshold(hsvplanes[0],hsvplanes[0], H_MIN, 255, THRESH_TOZERO);
			gpu::threshold(hsvplanes[0],hsvplanes[0], H_MAX, 255, THRESH_BINARY_INV);
			gpu::threshold(hsvplanes[1],hsvplanes[1], S_MIN, 255, THRESH_TOZERO);
			gpu::threshold(hsvplanes[1],hsvplanes[1], S_MAX, 255, THRESH_BINARY_INV);
			gpu::threshold(hsvplanes[2],hsvplanes[2], V_MIN, 255, THRESH_TOZERO);
			gpu::threshold(hsvplanes[2],hsvplanes[2], V_MAX, 255, THRESH_BINARY_INV);
			gpu::merge(hsvplanes, threshold);


		}

		gettimeofday(&timeb, NULL);
		totalTime += getTimeDelta(timea, timeb);
		threshold.download(thresh);
		imshow( "Source", frame );
		imshow( "Threshold", thresh );


		char c = (char)waitKey(5);
		if( c == 27 )
			break;
		switch(c)
		{
		case 'p':
			cout << "frames      : " << nFrames << endl;
			cout << "TotalTime   : " << double(totalTime)/1000000.0 << endl;
			cout << "FPS         : " << double(nFrames)/(double(totalTime)/1000000.0) << endl;
			totalTime = 0;
			nFrames = 0;
			paused = !paused;
			break;
		default:
			;
		}
	}

	return 0;
}



