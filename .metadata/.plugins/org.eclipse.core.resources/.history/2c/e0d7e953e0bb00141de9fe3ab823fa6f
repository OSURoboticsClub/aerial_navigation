#include "opencv2/video/tracking.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/gpu/gpu.hpp"

#include <iostream>
#include <ctype.h>
#include <vector>
#include <sys/time.h>
#include <stdio.h>

using namespace cv;
using namespace cv::gpu;
using namespace std;

Mat image, frame0, gray, sh;
GpuMat gpu_frame0, gpu_gray, gpu_mask, gpu_thresh, gpu_temp;
vector<GpuMat> train_coll(8), mask_coll(8);
vector<Rect> selections(8);

const int thresh = 200;
int element_shape = MORPH_RECT;

Rect selection;
Point origin;
bool selectObject = false;
int trackObject = 0;


static void onMouse( int event, int x, int y, int, void* )
{
	if( selectObject )
	{
		selection.x = MIN(x, origin.x);
		selection.y = MIN(y, origin.y);
		selection.width = std::abs(x - origin.x);
		selection.height = std::abs(y - origin.y);

		selection &= Rect(0, 0, image.cols, image.rows);
	}

	switch( event )
	{
	case CV_EVENT_LBUTTONDOWN:
		origin = Point(x,y);
		selection = Rect(x,y,0,0);
		selectObject = true;
		break;
	case CV_EVENT_LBUTTONUP:
		selectObject = false;
		if( selection.width > 0 && selection.height > 0 )
			trackObject = -1;
		break;
	}
}
long getTimeDelta(struct timeval timea, struct timeval timeb) {
	return 1000000 * (timeb.tv_sec - timea.tv_sec) +
			(int(timeb.tv_usec) - int(timea.tv_usec));
}
void kalman_init(KalmanFilter &kal, Point p, double processNoiseCov, double measurementNoiseCov, double errorCovPost){
	kal.statePre.at<float>(0) = p.x;
	kal.statePre.at<float>(1) = p.y;
	kal.statePre.at<float>(2) = 0;
	kal.statePre.at<float>(3) = 0;
	kal.transitionMatrix = *(Mat_<float>(4, 4) << 1,0,0,0,   0,1,0,0,  0,0,1,0,  0,0,0,1);

	setIdentity(kal.measurementMatrix);
	setIdentity(kal.processNoiseCov, Scalar::all(processNoiseCov));
	setIdentity(kal.measurementNoiseCov, Scalar::all(measurementNoiseCov));
	setIdentity(kal.errorCovPost, Scalar::all(errorCovPost));
}
void box_update(KalmanFilter &kal, Rect &bb, Mat_<float> &measurement, Point2f &ctr_point, Point2f &kal_point){
	Point measp = Point(bb.tl().x + (bb.width / 2), bb.tl().y + (bb.height / 2));
	measurement(0) = measp.x;
	measurement(1) = measp.y;

	ctr_point = measp;

	Mat estimated = kal.correct(measurement);
	Point statePt(estimated.at<float>(0),estimated.at<float>(1));
	kal_point = statePt;
	//selection = Rect(statePt, Point(statePt.x + bb.width, statePt.y + bb.height));
	selection.x = statePt.x - (bb.width/2);
	selection.y = statePt.y - (bb.height/2);
	selection.width = bb.width;
	selection.height = bb.height;
}
void proccess_frame(Mat morphElement, int threshold){
	gpu::cvtColor(gpu_frame0, gpu_gray, COLOR_BGR2GRAY);
	//gpu_mask = GpuMat(gpu_gray.size(), CV_8UC1, Scalar::all(0));
	//gpu_mask(selection).setTo(Scalar::all(255));

	gpu::threshold(gpu_gray, gpu_thresh, threshold, 255, THRESH_BINARY);
	gpu::bitwise_and(gpu_gray, gpu_thresh, gpu_gray);
	morphologyEx(gpu_gray, gpu_gray, CV_MOP_OPEN, morphElement);

}
//void gpu_pyramid(GpuMat &src, vector<GpuMat> &dst, int maxlevel){
//	if(dst.size() < maxlevel){
//		dst = vector<GpuMat>(maxlevel);
//	}
//	gpu::pyrDown(src, dst[0]);
//	for(i = 0; i < maxlevel; i++){
//		gpu::pyrDown(dst[i], dst[i+1]);
//	}
//}
//void gpu_pyramid(vector<GpuMat> &src, vector<vector<GpuMat> > &dst, int maxlevel){
//	for(int i = 0; i < src.size(); i++){
//		gpu_pyramid(src[i], dst[i], maxlevel);
//	}
//}
//void create_minmax_mask(Size src, vector<GpuMat> &masks){
//	if(masks.size() < 3){
//		masks = vector<GpuMat>(4);
//	}
//	vector<Point> tl(4), br(4);
//	tl[0] = Point(0,0);
//	tl[1] = Point((src.width/2) + 1, 0);
//	tl[2] = Point(0, (src.height/2) + 1);
//	tl[3] = Point((src.width/2) + 1, (src.height/2) + 1);
//	br[0] = Point(src.width/2, src.height/2);
//	br[1] = Point(src.width, src.height/2);
//	br[0] = Point(src.width/2, src.height);
//	br[0] = Point(src.width, src.height);
//
//	masks[i](Rect(tl[i], br[i]))
//}
void match_template(GpuMat &test, vector<GpuMat> &train, vector<int> &index, double &best_val, Point &best_loc, int &idx){
	int itr = 0;

	for(int i = 0; i < train_coll.size(); i++){
		itr++;
		gpu::matchTemplate(test, train[index[i]], gpu_temp, CV_TM_CCORR_NORMED);
		double max_value;
		Point location;
		gpu::minMaxLoc(gpu_temp, 0, &max_value, 0, &location);
		if(max_value > best_val){
			best_loc = location;
			best_val = max_value;
			idx = i;
		}
		if (max_value > .90){
			break;

		}
	}
	if(idx != 0){
		int tmp = index.at(idx);
		for(int i = idx; i > 0; i--){
			index[i] = index[i-1];
		}
		index[0] = tmp;
	}
	cerr << itr << " iterations " << best_val << endl;
}

int main( int argc, const char** argv )
{

	VideoCapture cap;
	Rect trackWindow;

	struct timeval timea, timeb, timeS, timeE;
	long totalTime = 0, matchTime = 0, convertTime = 0, loadTime = 0;
	int nFrames = 0;

	//cap.open("/home/scott/Aerial/aerial_navigation/photos/SoccerGoal.MOV");
	cap.open("/home/ubuntu/Aerial/photos/SoccerGoal2_464.mp4");
//	cap.open("/home/scott/Aerial//aerial_navigation/photos/SoccerGoal2.mp4");

	cerr << cap.get(CV_CAP_PROP_FRAME_WIDTH) << endl;
	cerr << cap.get(CV_CAP_PROP_FRAME_HEIGHT) << endl;
	vector<string> screenshots;
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh1_464.png");
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh2_464.png");
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh3_464.png");
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh4_464.png");
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh5_464.png");
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh6_464.png");
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh7_464.png");
	screenshots.push_back("/home/ubuntu/Aerial/WicketTraining/sh8_464.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh1.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh2.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh3.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh4.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh5.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh6.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh7.png");
//	screenshots.push_back("/home/scott/Aerial/aerial_navigation/WicketTraining/sh8.png");


	if( !cap.isOpened() )
	{
		cout << "***Could not initialize capturing...***\n";
		return -1;
	}

	Mat element = getStructuringElement(element_shape, Size(3, 3), Point(-1, -1) );

	KalmanFilter KF(4, 2, 0);
	Mat_<float> measurement(2,1); measurement.setTo(Scalar(0));
	Point pt(0, 0);

	namedWindow( "Good Features to Track Detector", 0 );
	setMouseCallback( "Good Features to Track Detector", onMouse, 0 );

	Rect bb;

	bool paused = false;
	bool debug = true;
	cap >> frame0;
	paused = true;
	vector<int> index(8);
	Point2f ctr_point, kal_point;

	ctr_point = pt;
	kal_point = pt;

	for(int i = 0; i < screenshots.size(); i++){
		sh = imread(screenshots[i]);

		for(;;){

			gpu_frame0.upload(sh);
			proccess_frame(element, thresh);

			gpu_gray.download(image);
			if(trackObject < 0) {

				mask_coll[i] = GpuMat(gpu_gray.size(), CV_8UC1, Scalar::all(0));
				mask_coll[i](selection).setTo(Scalar::all(255));
				gpu::bitwise_and(gpu_gray, mask_coll[i], train_coll[i]);
				train_coll[i] = train_coll[i](selection);
				selections[i] = selection;
				index[i] = i;
				trackObject = 0;
				selectObject = 0;
				break;
			}
			if( selectObject && selection.width > 0 && selection.height > 0 )
			{
				Mat mask(image, selection);
				bitwise_not(mask, mask);
			}
			imshow("Good Features to Track Detector", image);
			waitKey(10);
		}
	}

	for(;;)
	{
		gettimeofday(&timea, NULL);
		if( !paused )
		{
			gettimeofday(&timeS, NULL);
			cap >> frame0;
			gettimeofday(&timeE, NULL);
			loadTime += getTimeDelta(timeS, timeE);
			nFrames++;
			if( frame0.empty() )
				break;
		}
		if( !paused )
		{
			if(trackObject < 0) {
				Point p = Point(selection.tl().x + (selection.width / 2), selection.tl().y + (selection.height / 2));
				bb = selection;

				kalman_init(KF, p, 1e-4, 1e-4, .1);

				ctr_point = pt;
				kal_point = pt;

				trackObject = 1;
			}
			if(trackObject){

				Mat prediction = KF.predict();
				Point predictPt(prediction.at<float>(0),prediction.at<float>(1));
				bool smallwindow = false;
				if(predictPt.x != 0 || predictPt.y != 0){
					smallwindow = true;
					selection.x = predictPt.x - (selection.width/2);
					selection.y = predictPt.y - (selection.height/2);
				}

				gettimeofday(&timeS, NULL);
				gpu_frame0.upload(frame0);
				proccess_frame(element, thresh);

				gettimeofday(&timeE, NULL);
				convertTime += getTimeDelta(timeS, timeE);
				//gpu_gray.download(gray);

				double best_max_value = 0;
				Point best_location;
				Rect predictRect;
				int idx = 0;
				gettimeofday(&timeS, NULL);
				if(smallwindow){

					int wt = 2*selection.width;
					int ht = 2*selection.height;
					predictRect = Rect(predictPt.x - wt, predictPt.y - ht, predictPt.x + wt, predictPt.y + ht);

					GpuMat roi(gpu_gray, predictRect);

					match_template(roi, train_coll, index, best_max_value, best_location, idx);

				} else
					match_template(gpu_gray, train_coll, index, best_max_value, best_location, idx);

				gettimeofday(&timeE, NULL);
				matchTime += getTimeDelta(timeS, timeE);

				if (best_max_value > .8){
					if(smallwindow){
						best_location.x = best_location.x + predictRect.tl().x;
						best_location.y = best_location.y + predictRect.tl().y;
						bb = Rect(best_location.x,best_location.y, selections[index[idx]].width, selections[index[idx]].height);
						box_update(KF, bb, measurement, ctr_point, kal_point);
					} else {
						bb = Rect(best_location.x,best_location.y, selections[index[idx]].width, selections[index[idx]].height);
						box_update(KF, bb, measurement, ctr_point, kal_point);
					}
				}
			}
		}


		if( trackObject < 0 ) {
			paused = false;
		}

		gettimeofday(&timeb, NULL);
		totalTime += getTimeDelta(timea, timeb);
		if(debug){
			frame0.copyTo(image);
			rectangle(image, selection, Scalar(0, 0, 255), 1, 8, 0);
			rectangle(image, bb, Scalar(0, 255, 255), 1, 8, 0);
			circle( image, kal_point, 4, Scalar(0, 0, 255), -1, 8, 0 );
			circle( image, ctr_point, 4, Scalar(0, 255, 255), -1, 8, 0 );
			imshow( "Good Features to Track Detector", image );
		}

		char c = (char)waitKey(10);
		if( c == 27 )
			break;
		switch(c)
		{
		case 'c':
			trackObject = 0;
			break;
		case 'd':
			debug = !debug;
			break;
		case 'p':
			paused = !paused;
			cout << "frames                       : " << nFrames << endl;
			cout << "TotalTime                    : " << double(totalTime)/1000000.0 << endl;
			cout << "FPS                          : " << double(nFrames)/(double(totalTime)/1000000.0) << endl;
			cout << "Percentage Convert Time      : " << double(convertTime)/double(totalTime) << endl;
			cout << "Percentage Match Time        : " << double(matchTime)/double(totalTime) << endl;
			cout << "Percentage Load Time         : " << double(loadTime)/double(totalTime) << endl;
			totalTime = matchTime = convertTime = loadTime = 0;
			nFrames = 0;
			if(debug){
//				frame0.copyTo(image);
//				rectangle(image, selection, Scalar(0, 0, 255), 1, 8, 0);
//				rectangle(image, bb, Scalar(0, 255, 255), 1, 8, 0);
//				circle( image, kal_point, 4, Scalar(0, 0, 255), -1, 8, 0 );
//				circle( image, ctr_point, 4, Scalar(0, 255, 255), -1, 8, 0 );
//				imshow( "Good Features to Track Detector", image );
			}
			break;
		default:
			;
		}
	}

	return 0;
}
