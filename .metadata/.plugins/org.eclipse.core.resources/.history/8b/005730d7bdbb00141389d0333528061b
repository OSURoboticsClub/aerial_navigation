#include "opencv2/video/tracking.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/gpu/gpu.hpp"

#include <iostream>
#include <ctype.h>
#include <vector>
#include <sys/time.h>
#include <stdio.h>

using namespace cv;
using namespace std;

int s_min = 0;
int v_min = 0;
int v_max = 256;

const double areaRatio = 0.65;

Mat image;

bool backprojMode = false;
bool selectObject = false;
int trackObject = 0;
bool showHist = true;
const string trackbarWindowName = "Trackbars";

vector<Point> mousev,kalmanv;
Point origin;
Rect selection;

static void onMouse( int event, int x, int y, int, void* )
{
	if( selectObject )
	{
		selection.x = MIN(x, origin.x);
		selection.y = MIN(y, origin.y);
		selection.width = std::abs(x - origin.x);
		selection.height = std::abs(y - origin.y);

		selection &= Rect(0, 0, image.cols, image.rows);
	}

	switch( event )
	{
	case CV_EVENT_LBUTTONDOWN:
		origin = Point(x,y);
		selection = Rect(x,y,0,0);
		selectObject = true;
		break;
	case CV_EVENT_LBUTTONUP:
		selectObject = false;
		if( selection.width > 0 && selection.height > 0 )
			trackObject = -1;
		break;
	}
}
void on_trackbar( int, void* )
{
	//This function gets called whenever a
	// trackbar position is changed
}
void createTrackbars(){
	//create window for trackbars


    namedWindow(trackbarWindowName,0);
	//create memory to store trackbar name on window
	char TrackbarName[50];
	sprintf( TrackbarName, "s_min", s_min);
	sprintf( TrackbarName, "v_min", v_min);
	sprintf( TrackbarName, "v_max", v_max);
	//create trackbars and insert them into window
	//3 parameters are: the address of the variable that is changing when the trackbar is moved(eg.H_LOW),
	//the max value the trackbar can move (eg. H_HIGH),
	//and the function that is called whenever the trackbar is moved(eg. on_trackbar)
	//                                  ---->    ---->     ---->
    createTrackbar( "s_min", trackbarWindowName, &s_min, 255, on_trackbar );
    createTrackbar( "v_min", trackbarWindowName, &v_min, v_max, on_trackbar );
    createTrackbar( "v_max", trackbarWindowName, &v_max, v_max, on_trackbar );



}
static void help()
{
	cout << "\nThis is a demo that shows mean-shift based tracking\n"
			"You select a color objects such as your face and it tracks it.\n"
			"This reads from video camera (0 by default, or the camera number the user enters\n"
			"Usage: \n"
			"   ./camshiftdemo [camera number]\n";

	cout << "\n\nHot keys: \n"
			"\tESC - quit the program\n"
			"\tc - stop the tracking\n"
			"\tb - switch to/from backprojection view\n"
			"\th - show/hide object histogram\n"
			"\tp - pause video\n"
			"To initialize tracking, select the object with mouse\n";
}

const char* keys =
{
		"{1|  | 0 | camera number}"
};
long getTimeDelta(struct timeval timea, struct timeval timeb) {
	return 1000000 * (timeb.tv_sec - timea.tv_sec) +
			(int(timeb.tv_usec) - int(timea.tv_usec));
}


int main( int argc, const char** argv )
{
	help();
	struct timeval timea, timeb, timeS, timeE;
	long totalTime = 0, camTime = 0, kalTime = 0;
	int nFrames = 0;

	KalmanFilter KF(4, 2, 0);
	Mat_<float> state(4, 1); /* (x, y, Vx, Vy) */
	Mat processNoise(4, 1, CV_32F);
	Mat_<float> measurement(2,1); measurement.setTo(Scalar(0));
	Point pt(0, 0);
	mousev.push_back(pt);
	kalmanv.push_back(pt);

	bool kalman = false;
	bool found = false;
	VideoCapture cap;
	Rect trackWindow;
	int hsize = 32;
	float hranges[] = {0,180};
	const float* phranges = hranges;
	CommandLineParser parser(argc, argv, keys);
	int camNum = parser.get<int>("1");

	cap.open(0);

	if( !cap.isOpened() )
	{
		help();
		cout << "***Could not initialize capturing...***\n";
		cout << "Current parameter's value: \n";
		parser.printParams();
		return -1;
	}

	cout << ": width=" << cap.get(CV_CAP_PROP_FRAME_WIDTH) << ", height=" << cap.get(CV_CAP_PROP_FRAME_HEIGHT) << endl;
	cap.set(CV_CAP_PROP_FRAME_WIDTH, 1280 );
	cap.set(CV_CAP_PROP_FRAME_HEIGHT, 720 );
	cout << ": width=" << cap.get(CV_CAP_PROP_FRAME_WIDTH) << ", height=" << cap.get(CV_CAP_PROP_FRAME_HEIGHT) << endl;

	namedWindow( "Histogram", 0 );
	namedWindow( "CamShift Demo", 0 );
	setMouseCallback( "CamShift Demo", onMouse, 0 );
	createTrackbars();

	Mat frame, hsv, hue, mask, thresh, hist, histimg = Mat::zeros(200, 320, CV_8UC3), backproj;
	gpu::GpuMat gpuf, gpuhsv, gpuThresh;
	vector<gpu::GpuMat> hsvplanes(3);
	bool paused = false;
	cap >> frame;
	paused = true;
	for(;;)
	{
		gettimeofday(&timea, NULL);
		if( !paused )
		{
			cap >> frame;
			nFrames++;
			if( image.empty() )
				break;
		}

		frame.copyTo(image);
		cerr << "enterted loop\n";
		if( !paused ){
			found = true;
			cerr << "not paused\n";
			cvtColor(image, hsv, COLOR_BGR2HSV);
			//gpuf.upload(frame);
			//gpu::cvtColor(gpuf, gpuhsv, COLOR_BGR2HSV);

			if( trackObject )
			{

				//gpuhsv.download(hsv);
				int _vmin = v_min, _vmax = v_max;
				gettimeofday(&timeS, NULL);
				inRange(hsv, Scalar(0, s_min, MIN(_vmin,_vmax)),
						Scalar(180, 256, MAX(_vmin, _vmax)), mask);
				int ch[] = {0, 0};
				hue.create(hsv.size(), hsv.depth());
				mixChannels(&hsv, 1, &hue, 1, ch, 1);

				if( trackObject < 0 )
				{
					if(kalman){
						gettimeofday(&timeS, NULL);
						KF.statePre.at<float>(0) = mousev.back().x;
						KF.statePre.at<float>(1) = mousev.back().y;
						KF.statePre.at<float>(2) = 0;
						KF.statePre.at<float>(3) = 0;
						KF.transitionMatrix = *(Mat_<float>(4, 4) << 1,0,0,0,   0,1,0,0,  0,0,1,0,  0,0,0,1);

						setIdentity(KF.measurementMatrix);
						setIdentity(KF.processNoiseCov, Scalar::all(1e-4));
						setIdentity(KF.measurementNoiseCov, Scalar::all(1e-1));
						setIdentity(KF.errorCovPost, Scalar::all(.1));

						mousev.clear();
						kalmanv.clear();

						gettimeofday(&timeE, NULL);
						kalTime += getTimeDelta(timeS, timeE);

					}
					Mat roi(hue, selection), maskroi(mask, selection);
					cout << "Track < 0\n";
					calcHist(&roi, 1, 0, maskroi, hist, 1, &hsize, &phranges);
					normalize(hist, hist, 0, 255, CV_MINMAX);

					trackWindow = selection;
					trackObject = 1;

					histimg = Scalar::all(0);
					int binW = histimg.cols / hsize;
					Mat buf(1, hsize, CV_8UC3);
					for( int i = 0; i < hsize; i++ )
						buf.at<Vec3b>(i) = Vec3b(saturate_cast<uchar>(i*180./hsize), 255, 255);
					cvtColor(buf, buf, CV_HSV2BGR);

					for( int i = 0; i < hsize; i++ )
					{
						int val = saturate_cast<int>(hist.at<float>(i)*histimg.rows/255);
						rectangle( histimg, Point(i*binW,histimg.rows),
								Point((i+1)*binW,histimg.rows - val),
								Scalar(buf.at<Vec3b>(i)), -1, 8 );
					}
					cout << "track < 0 done \n";
				}

				calcBackProject(&hue, 1, 0, hist, backproj, &phranges);
				backproj &= mask;
				RotatedRect trackBox = CamShift(backproj, trackWindow,
						TermCriteria( CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 10, 1 ));
				gettimeofday(&timeE, NULL);
				camTime += getTimeDelta(timeS, timeE);

				if(kalman){
					gettimeofday(&timeS, NULL);
					Mat prediction = KF.predict();
					Point predictPt(prediction.at<float>(0),prediction.at<float>(1));

					measurement(0) = trackBox.center.x;
					measurement(1) = trackBox.center.y;

					Point measPt(measurement(0),measurement(1));
					mousev.push_back(measPt);

					Mat estimated = KF.correct(measurement);
					Point statePt(estimated.at<float>(0),estimated.at<float>(1));
					kalmanv.push_back(statePt);
#define drawCross( center, color, d )                     \
line( image, Point( center.x - d, center.y - d ),           \
Point( center.x + d, center.y + d ), color, 2, CV_AA, 0); \
line( image, Point( center.x + d, center.y - d ),           \
Point( center.x - d, center.y + d ), color, 2, CV_AA, 0 )

					drawCross( statePt, Scalar(255,255,255), 5 );
					drawCross( measPt, Scalar(0,0,255), 5 );

//					for (int i = 0; i < mousev.size()-1; i++) {
//						line(image, mousev[i], mousev[i+1], Scalar(255,255,0), 1);
//					}
//					for (int i = 0; i < kalmanv.size()-1; i++) {
//						line(image, kalmanv[i], kalmanv[i+1], Scalar(0,255,0), 1);
//					}
					gettimeofday(&timeE, NULL);
					kalTime += getTimeDelta(timeS, timeE);

				}
				if( trackWindow.area() <= 1 )
				{
					int cols = backproj.cols, rows = backproj.rows, r = (MIN(cols, rows) + 5)/6;
					trackWindow = Rect(trackWindow.x - r, trackWindow.y - r,
							trackWindow.x + r, trackWindow.y + r) &
									Rect(0, 0, cols, rows);
				}

				if( backprojMode )
					cvtColor( backproj, image, COLOR_GRAY2BGR );
				ellipse( image, trackBox, Scalar(0,0,255), 3, CV_AA );
			}
		}
		else if( trackObject < 0 )
			paused = false;
		cerr << "paused\n";
		if( selectObject && selection.width > 0 && selection.height > 0 )
		{
			cerr << "selecting\n";
			Mat roi(image, selection);
			bitwise_not(roi, roi);
		}
		gettimeofday(&timeb, NULL);
		totalTime += getTimeDelta(timea, timeb);
		imshow( "CamShift Demo", image );
		imshow( "Histogram", histimg );

		char c = (char)waitKey(5);
		if( c == 27 )
			break;
		switch(c)
		{
		case 'b':
			backprojMode = !backprojMode;
			break;
		case 'c':
			trackObject = 0;
			histimg = Scalar::all(0);
			break;
		case 'h':
			showHist = !showHist;
			if( !showHist )
				destroyWindow( "Histogram" );
			else
				namedWindow( "Histogram", 1 );
			break;
		case 'p':
			paused = !paused;
			break;
		case 'k':
			kalman = !kalman;
			cout << "frames                       : " << nFrames << endl;
			cout << "TotalTime                    : " << double(totalTime)/1000000.0 << endl;
			cout << "FPS                          : " << double(nFrames)/(double(totalTime)/1000000.0) << endl;
			cout << "Percentage CamShift Time     : " << double(camTime)/double(totalTime) << endl;
			cout << "Percentage KalmanFilter Time : " << double(kalTime)/double(totalTime) << endl;
			totalTime = camTime = kalTime = 0;
			nFrames = 0;
			break;
		case 'r':
			cout << ": width=" << cap.get(CV_CAP_PROP_FRAME_WIDTH) << ", height=" << cap.get(CV_CAP_PROP_FRAME_HEIGHT) << endl;
			break;
		default:
			;
		}
	}

	return 0;
}
